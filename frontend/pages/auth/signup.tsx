import React, { useRef, useState } from "react";
import Link from "next/link";
import Head from "next/head";
import Image from "next/image";
import Router from "next/router";
import type { NextPage } from "next";

import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import SignUpSchema from '../../validations/signup'

import { setUser } from '../../store/slices/user'
import { useAppDispatch } from '../../store/hooks'

import { Button, Flex, FormControl, FormErrorMessage, Heading, Input, Text } from "@chakra-ui/react";
import styles from '../../styles/pages/auth.module.scss';
import axios from "axios";


const SignUp: NextPage = () => {
  const [avatar, setAvatar] = useState<string>("/images/default_user.png");
  const avatarRef = useRef<any>(null);

  const selectImage = (e: any) => {
    setAvatar(URL.createObjectURL(e.target!.files[0]));
  };

  const { register, handleSubmit, setError, formState: { errors } } = useForm({
    resolver: yupResolver(SignUpSchema)
  });
  const dispatch = useAppDispatch();

  async function submit(values: any) {
    const formData = new FormData();
    formData.append("email", values.email);
    formData.append("password", values.password);
    formData.append("name", values.name);
    formData.append("avatar", avatarRef.current?.files[0]);

    axios.post("/api/auth/signup", formData)
      .then(response => {
        dispatch(setUser(response.data.user_data));
        Router.push("/");
      })
      .catch(error => {
        const { field, details } = error.response.data;
        setError(field, { type: 'manual', message: details });
      })
  }

  return (
    <Flex h="100vh" align="center" justify="center">
      <Head>
        <title>Sign Up</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex className={styles.form} bg='gray.800'>
        <Heading color='gray.300' m={7}>Sign Up</Heading>

<!--         <label htmlFor="avatar">
          <Image id={styles.avatar} src={avatar} key={avatar} width={200} height={200} alt="Avatar" />
        </label> -->
        <input
          ref={avatarRef}
          type="file"
          accept="image/*"
          hidden
          id="avatar"
          name="avatar"
          onChange={selectImage}
        />

        <FormControl
          isInvalid={!!errors?.name?.message}
        >
          <Input mt={2} variant='outline' placeholder="Enter your display name..." {...register("name")}/>
          <FormErrorMessage mb={2}>{errors?.name?.message}</FormErrorMessage>
        </FormControl>
        
        <FormControl
          isInvalid={!!errors?.email?.message}
        >
          <Input mt={4} variant='outline' type="email" placeholder="Enter your email..." {...register("email")}/>
          <FormErrorMessage mb={2}>{errors?.email?.message}</FormErrorMessage>
        </FormControl>
        
        <FormControl
          isInvalid={!!errors?.password?.message}
        >
          <Input mt={4} variant='outline' type="password" placeholder="Enter your password..." {...register("password")}/>
          <FormErrorMessage mb={2}>{errors?.password?.message}</FormErrorMessage>
        </FormControl>

        <Button variant='primary' colorScheme='teal' mt={7} w='100%' onClick={handleSubmit(submit)}>Sign Up âžœ</Button>

        
        <Link href="./signin">
          <Text my={4} color="gray.500" cursor="pointer">
            Sign in
          </Text>
        </Link>
      </Flex>
    </Flex>
  );
};

export default SignUp;
